{"version":3,"sources":["util/colors.js","Images/index.jsx","Images/ghost.png","Images/user-green.png","Components/ChatListItem/index.jsx","Components/ChatIntro/index.jsx","Components/MessageItem/index.jsx","Components/Chat/index.jsx","Components/NewChatPicker/index.jsx","App.js","index.js"],"names":["GHOST","USER","active","contact","onClick","className","src","image","name","Image","alt","user","message","key","style","justifyContent","id","author","backgroundColor","text","date","useState","isEmojiOpen","setEmojiOpen","setText","isListening","setListening","messageList","body","useRef","recognition","SpeechRecognition","window","webkitSpeechRecognition","undefined","useEffect","current","scrollHeight","offsetHeight","scrollTop","color","colors","ref","map","height","onEmojiClick","event","objEmoji","emoji","width","marginLeft","type","placeholder","value","onChange","typed","target","onstart","onend","onresult","result","transcript","start","contacts","isShowing","setShowing","clasName","App","avatar","Images","React","activeChat","setActiveChat","isShowingNewChat","setIsShowingNewChat","buttonColor","fontSize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gaAGe,G,MAFY,WCOZ,GAEbA,MCVa,IAA0B,kCDWvCC,KEXa,IAA0B,wC,OCS1B,cAAoC,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAIlC,OAEE,sBAAKC,UAAS,wBAAqBH,EAAS,SAAW,IAAME,QAASA,EAAtE,UAEE,qBAAKE,IAAKH,EAAQI,MAAOF,UAAU,WAGnC,sBAAKA,UAAU,QAAf,UAEE,sBAAKA,UAAU,OAAf,UAEE,qBAAKA,UAAU,OAAf,SACGF,EAAQK,OAGX,qBAAKH,UAAU,OAAf,2BAMF,qBAAKA,UAAU,OAAf,SAEE,qBAAKA,UAAU,cAAf,SACE,kEChCG,G,MAAA,WAGb,OAEE,sBAAKA,UAAU,cAAf,UAEE,gEAEE,qBAAKC,IAAKG,EAAMT,MAAOU,IAAI,QAAQL,UAAU,iBAE/C,wIAGA,+D,8GChBS,G,MAAA,YAA2B,IAAzBM,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,QAAkB,EAATC,IAG9B,OAEE,qBAAKR,UAAU,eAEbS,MACE,CACEC,eAAgBJ,EAAKK,KAAOJ,EAAQK,OAAOD,GAAK,WAAa,cAJnE,SAQE,sBAAKX,UAAU,eAEfS,MACE,CACEI,gBAAiBP,EAAKK,KAAOJ,EAAQK,OAAOD,GAAK,UAAY,cAJjE,UASE,qBAAKX,UAAU,UAAf,SACE,mBAAGA,UAAU,OAAb,SACIO,EAAQO,SAId,qBAAKd,UAAU,eAAf,SACGO,EAAQQ,cCbJ,cAAsB,IAApBjB,EAAmB,EAAnBA,QAASQ,EAAU,EAAVA,KAAU,EAGEU,oBAAS,GAHX,mBAG3BC,EAH2B,KAGdC,EAHc,OAIVF,mBAAS,IAJC,mBAI3BF,EAJ2B,KAIrBK,EAJqB,OAKEH,oBAAS,GALX,mBAK3BI,EAL2B,KAKdC,EALc,OAMIL,mBACpC,CACE,CAACJ,OAAQd,EAASgB,KAAM,wCAAmCC,KAAM,SACjE,CAACH,OAAQd,EAASgB,KAAM,uFAAkFC,KAAM,SAChH,CAACH,OAAQN,EAAMQ,KAAM,wCAAmCC,KAAM,SAC9D,CAACH,OAAQN,EAAMQ,KAAM,gEAA2DC,KAAM,SAEtF,CAACH,OAAQd,EAASgB,KAAM,wCAAmCC,KAAM,SACjE,CAACH,OAAQd,EAASgB,KAAM,sFAAiFC,KAAM,SAC/G,CAACH,OAAQN,EAAMQ,KAAM,wCAAmCC,KAAM,SAC9D,CAACH,OAAQN,EAAMQ,KAAM,gEAA2DC,KAAM,SAEtF,CAACH,OAAQd,EAASgB,KAAM,wCAAmCC,KAAM,SACjE,CAACH,OAAQd,EAASgB,KAAM,uFAAkFC,KAAM,SAChH,CAACH,OAAQN,EAAMQ,KAAM,wCAAmCC,KAAM,SAC9D,CAACH,OAAQN,EAAMQ,KAAM,gEAA2DC,KAAM,WArBxD,mBAM3BO,EAN2B,KAyB5BC,GAzB4B,KAyBrBC,oBAETC,EAAc,KACdC,EAAoBC,OAAOD,mBAAqBC,OAAOC,6BAElCC,IAAtBH,IAEDD,EAAc,IAAIC,GAGpBI,qBAAU,WAEJP,EAAKQ,QAAQC,aAAeT,EAAKQ,QAAQE,eAE3CV,EAAKQ,QAAQG,UAAYX,EAAKQ,QAAQC,aAAeT,EAAKQ,QAAQE,gBAGpE,CAACX,IAmDH,OAEE,sBAAKtB,UAAU,cAAf,UAEE,mCACE,sBAAKA,UAAU,OAAf,UAEE,qBAAKA,UAAU,eAAeC,IAAKH,EAAQI,QAE3C,qBAAKF,UAAU,OAAf,SACGF,EAAQK,UAIb,sBAAKH,UAAU,eAAf,UAEE,qBAAKA,UAAU,SAAf,SACE,cAAC,IAAD,CAAYS,MAAO,CAAC0B,MAAOC,OAG7B,qBAAKpC,UAAU,SAAf,SACI,cAAC,IAAD,CAAgBS,MAAO,CAAC0B,MAAOC,OAGnC,qBAAKpC,UAAU,SAAf,SACE,cAAC,IAAD,CAAcS,MAAO,CAAC0B,MAAOC,aAMnC,qBAAKC,IAAKd,EAAMvB,UAAU,YAA1B,SACGsB,EAAYgB,KAAI,SAAC/B,EAASC,GAAV,OACf,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,GACJC,QAKX,yBAASR,UAAU,aACjBS,MAAO,CAAC8B,OAAQtB,EAAc,QAAU,OAD1C,SAIE,cAAC,IAAD,CAEEuB,aApFiB,SAACC,EAAOC,GAE/BvB,EAAQ,GAAGL,EAAO4B,EAASC,YAsFzB,yBAAQ3C,UAAU,aAAlB,UAEE,qBAAKA,UAAU,OAAf,SAEE,sBAAKA,UAAU,eAAeS,MAAO,CAACmC,MAAO3B,EAAc,GAAK,IAAhE,UAEE,qBAAKjB,UAAU,SAEbD,QAtGO,WAEjBmB,GAAa,IAkGL,SAIE,cAAC,IAAD,CACET,MACE,CACE0B,MAAOC,EACPQ,MAAO3B,EAAc,GAAK,OAMlC,qBAAKjB,UAAU,SAEbD,QAzHM,WAEhBmB,GAAa,IAqHL,SAIE,cAAC,IAAD,CACAT,MACI,CACE0B,MAAOlB,EAAc,UAAYmB,EACjCS,WAAY5B,EAAc,GAAK,aAS3C,qBAAKjB,UAAU,SAAf,SAEE,uBACE8C,KAAK,SACLC,YAAY,8BACZC,MAAOlC,EACPmC,SAAW,SAAAC,GAAK,OAAI/B,EAAQ+B,EAAMC,OAAOH,YAK7C,qBAAKhD,UAAU,QAAf,SAEE,qBAAKA,UAAU,eAAf,SAIW,KAATc,EAII,qBAAKd,UAAU,SAASD,QA5IZ,aA4IZ,SACE,cAAC,IAAD,CAAUU,MAAO,CAAC0B,MAAOC,OAK3B,qBAAKpC,UAAU,SAASD,QA9If,WAGF,OAAhB0B,IAEDA,EAAY2B,QAAU,WACpB/B,GAAa,IAGfI,EAAY4B,MAAQ,WAClBhC,GAAa,IAGfI,EAAY6B,SAAW,SAACb,GAItBtB,EAAQL,EAAK,IAAK2B,EAAMc,OAAO,GAAG,GAAGC,aAIvC/B,EAAYgC,UAyHF,SACE,cAAC,IAAD,CAAShD,MAAO,CAAC0B,MAAOf,EAAc,UAAYgB,kB,yBC5NrD,cAA8C,IAA5CsB,EAA2C,EAA3CA,SAA2C,KAAjCpD,KAAiC,EAA3BqD,UAA2B,EAAhBC,WAEJ5C,mBAAS0C,IAFW,6BAI1D,OAEE,4BAAW1D,UAAU,gBAArB,UAEE,iCAEE,sBAAK6D,SAAS,eAAd,UAEE,qBAAKA,SAAS,SAAd,SAEE,cAAC,IAAD,CAAepD,MAAO,CAAC0B,MAAOC,OAIhC,qBAAKpC,UAAU,QAAf,SACE,iDAON,yBAASA,UAAU,qBC0GV8D,MAvHf,WAEE,IAAMC,EAASC,EAAOpE,KAFT,EAImBqE,IAAMjD,SAAS,CAE7C,CAAEL,GAAI,EAAGR,KAAM,yCAAoCD,MAAO6D,GAC1D,CAAEpD,GAAI,EAAGR,KAAM,+BAA0BD,MAAO6D,GAChD,CAAEpD,GAAI,EAAGR,KAAM,+BAA0BD,MAAO6D,GAChD,CAAEpD,GAAI,EAAGR,KAAM,gCAA2BD,MAAO6D,KATtC,mBAINL,EAJM,aAaWO,IAAMjD,SAC5B,CAAEL,GAAI,GAAIR,KAAM,uBAAwBD,MAAO6D,KAdpC,mBAaNzD,EAbM,aAiBuBU,mBAAU,KAjBjC,mBAiBNkD,EAjBM,KAiBMC,EAjBN,OAmBmCnD,oBAAS,GAnB5C,mBAmBNoD,EAnBM,KAmBYC,EAnBZ,KAqBPC,EAAclC,EAQpB,OAEE,sBAAKpC,UAAU,aAAf,UAEE,sBAAKA,UAAU,UAAf,UAEE,cAAC,EAAD,CAEE0D,SAAUA,EACVpD,KAAMA,EACNqD,UAAWS,EACXR,WAAYS,IAId,mCAEE,8BACE,cAAC,IAAD,CAAmBrE,UAAU,aAAaS,MAAO,CAAE0B,MAAOmC,OAG5D,sBAAKtE,UAAU,eAAf,UAEE,qBAAKA,UAAU,SAAf,SACE,cAAC,IAAD,CAAgBS,MAAO,CAAC0B,MAAOmC,OAGjC,qBAAKtE,UAAU,SAASD,QAhCZ,WAEpBsE,GAAoB,IA8BZ,SACE,cAAC,IAAD,CAAU5D,MAAO,CAAC0B,MAAOmC,OAG3B,qBAAKtE,UAAU,SAAf,SACE,cAAC,IAAD,CAAcS,MAAO,CAAC0B,MAAOmC,aAOnC,qBAAKtE,UAAU,cAAf,SAEE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CAAQuE,SAAS,QAAQ9D,MAAO,CAAC0B,MAAOmC,KACxC,uBAAOxB,KAAK,SAASC,YAAY,iCAMrC,qBAAK/C,UAAU,WAAf,SAEG0D,EAASpB,KAAI,SAACxC,EAASU,GAAV,OAEZ,cAAC,EAAD,CAEEV,QAASA,EACTC,QAAS,kBAAMoE,EAAcT,EAASlD,KACtCX,OAAQqE,EAAWvD,KAAOb,EAAQa,IAH7BH,WAcb,sBAAKR,UAAU,eAAf,eAEqB6B,IAAlBqC,EAAWvD,IAEV,cAAC,EAAD,CACEb,QAASoE,EACT5D,KAAMA,SAISuB,IAAlBqC,EAAWvD,IAEV,cAAC,EAAD,WC5HV6D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b04e1996.chunk.js","sourcesContent":["\r\nconst defaultButtonColor = '#919191';\r\n\r\nexport default {\r\n  DEFAULT_BUTTON_COLOR : defaultButtonColor\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport ghost from './ghost.png'\r\nimport user from './user-green.png'\r\n\r\nconst Ghost = ghost;\r\nconst User = user;\r\n\r\nexport default {\r\n\r\n  GHOST: Ghost,\r\n  USER: User\r\n}\r\n","export default __webpack_public_path__ + \"static/media/ghost.78a34c6f.png\";","export default __webpack_public_path__ + \"static/media/user-green.cfde39fc.png\";","import React from 'react'\r\nimport './ChatListItem.css'\r\n\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\n\r\nimport Colors from '../../util/colors'\r\nimport Images from '../../Images'\r\n\r\n\r\nexport default ( { active, contact, onClick }) => {\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div className = {`contact-card  ${active ? 'active' : ''}`} onClick={onClick}>\r\n\r\n      <img src={contact.image} className='avatar'/>\r\n\r\n\r\n      <div className='lines'>\r\n\r\n        <div className=\"line\">\r\n\r\n          <div className=\"name\">\r\n            {contact.name}\r\n          </div>\r\n\r\n          <div className=\"date\">\r\n            31/01/2020\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"line\">\r\n\r\n          <div className=\"lastMessage\">\r\n            <p>Pedro falácias >-()</p>\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './ChatIntro.css'\r\n\r\nimport Image from '../../Images'\r\n\r\nexport default () => {\r\n\r\n\r\n  return (\r\n\r\n    <div className='intro--view'>\r\n\r\n      <h1> Seja Bem Vindo ao Whatsapp 2 </h1>\r\n\r\n        <img src={Image.GHOST} alt=\"ghost\" className='intro--image'/>\r\n\r\n      <h2> Este clone do whatssap vai além do visual, teste o chat, inicie uma conversa com algum usuário </h2>\r\n\r\n\r\n      <h5>...pedro conteudos ):-()</h5>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './MessageItem.css'\r\n\r\nexport default ({user, message, key}) => {\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"message-line\"\r\n\r\n      style={\r\n        {\r\n          justifyContent: user.id === message.author.id ? 'flex-end' : 'flex-start'\r\n        }\r\n      }\r\n    >\r\n      <div className=\"message-item\"\r\n\r\n      style={\r\n        {\r\n          backgroundColor: user.id === message.author.id ? '#DCF8C6' : 'flex-start'\r\n        }\r\n      }\r\n      >\r\n\r\n        <div className=\"message\">\r\n          <p className=\"text\">\r\n            { message.text }\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"message-data\">\r\n          {message.date}\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n","import React, {useState, useEffect, useRef} from 'react'\r\nimport './Chat.css'\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\n\r\nimport EmojiPicker from 'emoji-picker-react';\r\n\r\nimport MessageItem from '../MessageItem'\r\n\r\nimport colors from '../../util/colors';\r\n\r\nexport default ({contact, user}) => {\r\n\r\n\r\n  const [isEmojiOpen, setEmojiOpen] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n  const [isListening, setListening] = useState(false);\r\n  const [messageList, setMessageList] = useState(\r\n    [\r\n      {author: contact, text: 'Pedro Comunicações Textuais >()', date: '00:00'},\r\n      {author: contact, text: ' || Pedro Comunicações Textuais deseja se comunicar com vossa ppessoa >() ||  ', date: '00:00'},\r\n      {author: user, text: 'Pedro Comunicações Textuais >()', date: '00:00'},\r\n      {author: user, text: 'Pedro Comunicações Textuais >() o que deseja comunicar?', date: '00:00'},\r\n\r\n      {author: contact, text: 'Pedro Comunicações Textuais >()', date: '00:00'},\r\n      {author: contact, text: '|| Pedro Comunicações Textuais deseja se comunicar com vossa ppessoa >() ||  ', date: '00:00'},\r\n      {author: user, text: 'Pedro Comunicações Textuais >()', date: '00:00'},\r\n      {author: user, text: 'Pedro Comunicações Textuais >() o que deseja comunicar?', date: '00:00'},\r\n\r\n      {author: contact, text: 'Pedro Comunicações Textuais >()', date: '00:00'},\r\n      {author: contact, text: ' || Pedro Comunicações Textuais deseja se comunicar com vossa ppessoa >() ||  ', date: '00:00'},\r\n      {author: user, text: 'Pedro Comunicações Textuais >()', date: '00:00'},\r\n      {author: user, text: 'Pedro Comunicações Textuais >() o que deseja comunicar?', date: '00:00'}\r\n    ]);\r\n\r\n\r\n  const body = useRef();\r\n\r\n  let recognition = null\r\n  let SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\n\r\n  if(SpeechRecognition !== undefined) {\r\n\r\n    recognition = new SpeechRecognition()\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    if (body.current.scrollHeight > body.current.offsetHeight) {\r\n\r\n      body.current.scrollTop = body.current.scrollHeight - body.current.offsetHeight\r\n    }\r\n\r\n  },[messageList])\r\n\r\n\r\n  const openEmoji = () => {\r\n\r\n    setEmojiOpen(true)\r\n  }\r\n\r\n  const closeEmoji = () => {\r\n\r\n    setEmojiOpen(false)\r\n  }\r\n\r\n\r\n  const handleEmojiClick = (event, objEmoji) => {\r\n\r\n    setText(''+text + objEmoji.emoji)\r\n  }\r\n\r\n\r\n  const handleSendMessage = () => {\r\n\r\n  }\r\n\r\n  const handleMicClick = () => {\r\n\r\n\r\n    if(recognition !== null) {\r\n\r\n      recognition.onstart = () => {\r\n        setListening(true)\r\n      }\r\n\r\n      recognition.onend = () => {\r\n        setListening(false)\r\n      }\r\n\r\n      recognition.onresult = (event) => {\r\n\r\n\r\n\r\n        setText(text+' '+ event.result[0][0].transcript)\r\n      }\r\n\r\n\r\n      recognition.start()\r\n\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n\r\n    <div className='chat-window'>\r\n\r\n      <header>\r\n        <div className=\"info\">\r\n\r\n          <img className=\"perfil-image\" src={contact.image}/>\r\n\r\n          <div className=\"name\">\r\n            {contact.name}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"button-group\">\r\n\r\n          <div className=\"button\">\r\n            <SearchIcon style={{color: colors.DEFAULT_BUTTON_COLOR}}/>\r\n          </div>\r\n\r\n          <div className=\"button\">\r\n              <AttachFileIcon style={{color: colors.DEFAULT_BUTTON_COLOR}}/>\r\n            </div>\r\n\r\n          <div className=\"button\">\r\n            <MoreVertIcon style={{color: colors.DEFAULT_BUTTON_COLOR}}/>\r\n          </div>\r\n\r\n        </div>\r\n      </header>\r\n\r\n      <div ref={body} className=\"chat-body\">\r\n        {messageList.map((message, key) => (\r\n          <MessageItem\r\n            user={user}\r\n            message={message}\r\n            key={key}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <section className=\"emoji-area\"\r\n        style={{height: isEmojiOpen ? '250px' : '0px'}}\r\n      >\r\n\r\n        <EmojiPicker\r\n\r\n          onEmojiClick={handleEmojiClick}\r\n        />\r\n      </section>\r\n\r\n      <footer className=\"chat-input\">\r\n\r\n        <div className=\"left\">\r\n\r\n          <div className=\"button-group\" style={{width: isEmojiOpen ? 80 : 40}}>\r\n\r\n            <div className=\"button\"\r\n\r\n              onClick={closeEmoji}\r\n            >\r\n              <CloseIcon\r\n                style={\r\n                  {\r\n                    color: colors.DEFAULT_BUTTON_COLOR,\r\n                    width: isEmojiOpen ? 40 : 0\r\n                  }\r\n                }/>\r\n\r\n            </div>\r\n\r\n            <div className=\"button\"\r\n\r\n              onClick={openEmoji}\r\n            >\r\n              <InsertEmoticonIcon\r\n              style={\r\n                  {\r\n                    color: isEmojiOpen ? '#009688' : colors.DEFAULT_BUTTON_COLOR,\r\n                    marginLeft: isEmojiOpen ? 0 : -40\r\n                  }\r\n                }/>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"center\">\r\n\r\n          <input\r\n            type='search'\r\n            placeholder='Pedro Digitações >:[]'\r\n            value={text}\r\n            onChange={ typed => setText(typed.target.value)}\r\n            />\r\n\r\n        </div>\r\n\r\n        <div className=\"right\">\r\n\r\n          <div className=\"button-group\">\r\n\r\n            {\r\n\r\n            text !== ''\r\n\r\n              ?\r\n\r\n                <div className=\"button\" onClick={handleSendMessage}>\r\n                  <SendIcon style={{color: colors.DEFAULT_BUTTON_COLOR}}/>\r\n                </div>\r\n\r\n              :\r\n\r\n                <div className=\"button\" onClick={handleMicClick}>\r\n                  <MicIcon style={{color: isListening ? '#126ECE' : colors.DEFAULT_BUTTON_COLOR}}/>\r\n                </div>\r\n            }\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n      </footer>\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport './NewChatPicker.css'\r\n\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport colors from '../../util/colors';\r\n\r\n\r\n\r\nexport default ({contacts, user, isShowing, setShowing}) => {\r\n\r\n  const [contactList, setcontactList] = useState(contacts)\r\n\r\n  return (\r\n\r\n    <selection className='NewChatPicker'>\r\n\r\n      <header>\r\n\r\n        <div clasName=\"button-group\">\r\n\r\n          <div clasName=\"button\">\r\n\r\n            <ArrowBackIcon style={{color: colors.DEFAULT_BUTTON_COLOR}}/>\r\n\r\n          </div>\r\n\r\n          <div className='title'>\r\n            <p>Novo Chat</p>\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </header>\r\n\r\n      <section className='contact-list'>\r\n\r\n      </section>\r\n\r\n    </selection>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\n\n\n\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Search from '@material-ui/icons/Search';\n\nimport ChatListItem from './Components/ChatListItem'\nimport ChatIntro from './Components/ChatIntro';\n\nimport colors from './util/colors';\nimport Images from './Images'\nimport Chat from './Components/Chat';\n\nimport NewChatPicker from './Components/NewChatPicker'\n\nfunction App() {\n\n  const avatar = Images.USER\n\n  const [contacts, setContacts] = React.useState([\n\n    { id: 1, name: 'Pedro Comunicações Textuais ):()', image: avatar },\n    { id: 2, name: 'Pedro Nomeações ):() 2', image: avatar },\n    { id: 3, name: 'Pedro Nomeações ):() 3', image: avatar },\n    { id: 4, name: 'Pedro Nomeações ):( ) 4', image: avatar }\n\n  ])\n\n  const [user, setUser] = React.useState(\n    { id: 10, name: ' Pedro Usador >-:() ', image: avatar }\n  )\n\n  const [activeChat, setActiveChat] = useState( {} )\n\n  const [isShowingNewChat, setIsShowingNewChat] = useState(false)\n\n  const buttonColor = colors.DEFAULT_BUTTON_COLOR\n\n\n  const handleNewChat = () => {\n\n    setIsShowingNewChat(true)\n  }\n\n  return (\n\n    <div className='app-window'>\n\n      <div className='sidebar'>\n\n        <NewChatPicker\n\n          contacts={contacts}\n          user={user}\n          isShowing={isShowingNewChat}\n          setShowing={setIsShowingNewChat}\n\n        />\n\n        <header>\n\n          <div >\n            <AccountCircleIcon className='img-perfil' style={{ color: buttonColor }}/>\n          </div>\n\n          <div className='button-group'>\n\n            <div className='button'>\n              <DonutLargeIcon style={{color: buttonColor}}/>\n            </div>\n\n            <div className='button' onClick={handleNewChat}>\n              <ChatIcon style={{color: buttonColor}}/>\n            </div>\n\n            <div className='button'>\n              <MoreVertIcon style={{color: buttonColor}}/>\n            </div>\n\n          </div>\n\n        </header>\n\n        <div className='search-area'>\n\n          <div className='search-input'>\n            <Search fontSize='small' style={{color: buttonColor}}/>\n            <input type='search' placeholder='Pedro pesquisas >:()...'/>\n          </div>\n\n\n        </div>\n\n        <div className='chatlist'>\n\n          {contacts.map((contact, key) => (\n\n            <ChatListItem\n              key={key}\n              contact={contact}\n              onClick={() => setActiveChat(contacts[key])}\n              active={activeChat.id === contact.id}\n            />\n\n              ))\n          }\n\n\n        </div>\n\n      </div>\n\n      <div className='content-area'>\n\n        {activeChat.id !== undefined &&\n\n          <Chat\n            contact={activeChat}\n            user={user}\n          />\n        }\n\n        {activeChat.id === undefined &&\n\n          <ChatIntro />\n        }\n\n      </div>\n\n    </div>\n\n  );\n}\n\nexport default App;\n\n\n\n\n\n/*\n\n <img className='img-perfil' src='https://www.flaticon.com/svg/vstatic/svg/149/149071.svg?token=exp=1618412728~hmac=c56c9517cc5179914f240a60d068c9e6' />\n\n\n*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}